// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RxTest
import Foundation
import RxSwift
import Swift
import XCTest
import _Concurrency
public struct Recorded<Value> : Swift.CustomDebugStringConvertible {
  public let time: RxTest.TestTime
  public let value: Value
  public init(time: RxTest.TestTime, value: Value)
}
extension RxTest.Recorded {
  public var debugDescription: Swift.String {
    get
  }
}
extension RxTest.Recorded : Swift.Equatable where Value : Swift.Equatable {
  public static func == (lhs: RxTest.Recorded<Value>, rhs: RxTest.Recorded<Value>) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class TestableObserver<Element> : RxSwift.ObserverType {
  final public var events: [RxTest.Recorded<RxSwift.Event<Element>>] {
    get
  }
  final public func on(_ event: RxSwift.Event<Element>)
  @objc deinit
}
public func XCTAssertEqual<Element>(_ lhs: [RxSwift.Event<Element>], _ rhs: [RxSwift.Event<Element>], file: Swift.StaticString = #file, line: Swift.UInt = #line) where Element : Swift.Equatable
public func XCTAssertEqual<Element>(_ lhs: [RxSwift.SingleEvent<Element>], _ rhs: [RxSwift.SingleEvent<Element>], file: Swift.StaticString = #file, line: Swift.UInt = #line) where Element : Swift.Equatable
public func XCTAssertEqual<Element>(_ lhs: [RxSwift.MaybeEvent<Element>], _ rhs: [RxSwift.MaybeEvent<Element>], file: Swift.StaticString = #file, line: Swift.UInt = #line) where Element : Swift.Equatable
public func XCTAssertEqual(_ lhs: [RxSwift.CompletableEvent], _ rhs: [RxSwift.CompletableEvent], file: Swift.StaticString = #file, line: Swift.UInt = #line)
public func XCTAssertEqual<Element>(_ lhs: [RxTest.Recorded<RxSwift.Event<Element>>], _ rhs: [RxTest.Recorded<RxSwift.Event<Element>>], file: Swift.StaticString = #file, line: Swift.UInt = #line) where Element : Swift.Equatable
public func XCTAssertEqual<Element>(_ lhs: [RxTest.Recorded<RxSwift.Event<Element?>>], _ rhs: [RxTest.Recorded<RxSwift.Event<Element?>>], file: Swift.StaticString = #file, line: Swift.UInt = #line) where Element : Swift.Equatable
public func XCTAssertRecordedElements<Element>(_ stream: [RxTest.Recorded<RxSwift.Event<Element>>], _ elements: [Element], file: Swift.StaticString = #file, line: Swift.UInt = #line) where Element : Swift.Equatable
public typealias TestTime = Swift.Int
extension RxSwift.CompletableEvent : Swift.Equatable {
  public static func == (lhs: RxSwift.CompletableEvent, rhs: RxSwift.CompletableEvent) -> Swift.Bool
}
extension RxSwift.Event : Swift.Equatable where Element : Swift.Equatable {
  public static func == (lhs: RxSwift.Event<Element>, rhs: RxSwift.Event<Element>) -> Swift.Bool
}
extension RxSwift.MaybeEvent : Swift.Equatable where Element : Swift.Equatable {
  public static func == (lhs: RxSwift.MaybeEvent<Element>, rhs: RxSwift.MaybeEvent<Element>) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class TestableObservable<Element> : RxSwift.ObservableType {
  public var subscriptions: [RxTest.Subscription] {
    get
  }
  public var recordedEvents: [RxTest.Recorded<RxSwift.Event<Element>>] {
    get
  }
  public func subscribe<Observer>(_ observer: Observer) -> RxSwift.Disposable where Element == Observer.Element, Observer : RxSwift.ObserverType
  @objc deinit
}
public class TestScheduler : RxSwift.VirtualTimeScheduler<RxTest.TestSchedulerVirtualTimeConverter> {
  public struct Defaults {
    public static let created: Swift.Int
    public static let subscribed: Swift.Int
    public static let disposed: Swift.Int
  }
  public init(initialClock: RxTest.TestTime, resolution: Swift.Double = 1.0, simulateProcessingDelay: Swift.Bool = true)
  public func createHotObservable<Element>(_ events: [RxTest.Recorded<RxSwift.Event<Element>>]) -> RxTest.TestableObservable<Element>
  public func createColdObservable<Element>(_ events: [RxTest.Recorded<RxSwift.Event<Element>>]) -> RxTest.TestableObservable<Element>
  public func createObserver<Element>(_ type: Element.Type) -> RxTest.TestableObserver<Element>
  public func scheduleAt(_ time: RxTest.TestTime, action: @escaping () -> Swift.Void)
  override public func adjustScheduledTime(_ time: RxTest.TestScheduler.VirtualTime) -> RxTest.TestScheduler.VirtualTime
  public func start<Element, OutputSequence>(created: RxTest.TestTime, subscribed: RxTest.TestTime, disposed: RxTest.TestTime, create: @escaping () -> OutputSequence) -> RxTest.TestableObserver<Element> where Element == OutputSequence.Element, OutputSequence : RxSwift.ObservableConvertibleType
  public func start<Element, OutputSequence>(disposed: RxTest.TestTime, create: @escaping () -> OutputSequence) -> RxTest.TestableObserver<Element> where Element == OutputSequence.Element, OutputSequence : RxSwift.ObservableConvertibleType
  public func start<Element, OutputSequence>(_ create: @escaping () -> OutputSequence) -> RxTest.TestableObserver<Element> where Element == OutputSequence.Element, OutputSequence : RxSwift.ObservableConvertibleType
  @objc deinit
}
extension RxTest.Recorded {
  public static func next<T>(_ time: RxTest.TestTime, _ element: T) -> RxTest.Recorded<RxSwift.Event<T>> where Value == RxSwift.Event<T>
  public static func completed<T>(_ time: RxTest.TestTime, _ type: T.Type = T.self) -> RxTest.Recorded<RxSwift.Event<T>> where Value == RxSwift.Event<T>
  public static func error<T>(_ time: RxTest.TestTime, _ error: Swift.Error, _ type: T.Type = T.self) -> RxTest.Recorded<RxSwift.Event<T>> where Value == RxSwift.Event<T>
}
extension RxTest.Recorded {
  public static func events<T>(_ recordedEvents: RxTest.Recorded<RxSwift.Event<T>>...) -> [RxTest.Recorded<RxSwift.Event<T>>] where Value == RxSwift.Event<T>
  public static func events<T>(_ recordedEvents: [RxTest.Recorded<RxSwift.Event<T>>]) -> [RxTest.Recorded<RxSwift.Event<T>>] where Value == RxSwift.Event<T>
}
public struct Subscription {
  public let subscribe: Swift.Int
  public let unsubscribe: Swift.Int
  public init(_ subscribe: Swift.Int)
  public init(_ subscribe: Swift.Int, _ unsubscribe: Swift.Int)
}
extension RxTest.Subscription : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension RxTest.Subscription : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public func == (lhs: RxTest.Subscription, rhs: RxTest.Subscription) -> Swift.Bool
public struct TestSchedulerVirtualTimeConverter : RxSwift.VirtualTimeConverterType {
  public typealias VirtualTimeUnit = Swift.Int
  public typealias VirtualTimeIntervalUnit = Swift.Int
  public func convertFromVirtualTime(_ virtualTime: RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeUnit) -> RxSwift.RxTime
  public func convertToVirtualTime(_ time: RxSwift.RxTime) -> RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeUnit
  public func convertFromVirtualTimeInterval(_ virtualTimeInterval: RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeIntervalUnit) -> Foundation.TimeInterval
  public func convertToVirtualTimeInterval(_ timeInterval: Foundation.TimeInterval) -> RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeIntervalUnit
  public func offsetVirtualTime(_ time: RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeUnit, offset: RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeIntervalUnit) -> RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeUnit
  public func compareVirtualTime(_ lhs: RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeUnit, _ rhs: RxTest.TestSchedulerVirtualTimeConverter.VirtualTimeUnit) -> RxSwift.VirtualTimeComparison
}
