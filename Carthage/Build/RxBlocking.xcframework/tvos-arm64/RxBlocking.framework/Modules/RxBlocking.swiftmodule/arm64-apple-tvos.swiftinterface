// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-tvos9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RxBlocking
import CoreFoundation
import Darwin
import Foundation
import RxSwift
import Swift
import _Concurrency
public struct BlockingObservable<Element> {
}
@frozen public enum MaterializedSequenceResult<T> {
  case completed(elements: [T])
  case failed(elements: [T], error: Swift.Error)
}
extension RxBlocking.BlockingObservable {
  public func toArray() throws -> [Element]
}
extension RxBlocking.BlockingObservable {
  public func first() throws -> Element?
}
extension RxBlocking.BlockingObservable {
  public func last() throws -> Element?
}
extension RxBlocking.BlockingObservable {
  public func single() throws -> Element
  public func single(_ predicate: @escaping (Element) throws -> Swift.Bool) throws -> Element
}
extension RxBlocking.BlockingObservable {
  public func materialize() -> RxBlocking.MaterializedSequenceResult<Element>
}
extension RxSwift.ObservableConvertibleType {
  public func toBlocking(timeout: Foundation.TimeInterval? = nil) -> RxBlocking.BlockingObservable<Self.Element>
}
